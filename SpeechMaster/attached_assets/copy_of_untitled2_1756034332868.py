# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18M7Ppixg0gwh7IkkInHSWRtHYRO-9tsj
"""



"""# Task
Clone the repository "https://github.com/Devs-Do-Code/a4f-local", create a Gradio interface for it with a text input length of 100000, and ensure the voice output is combined into a single MP3 file.

## Clone the repository

### Subtask:
Clone the repository from GitHub to access the project files.

**Reasoning**:
Clone the specified GitHub repository using a shell command.
"""

!git clone https://github.com/Devs-Do-Code/a4f-local

"""## Install dependencies

### Subtask:
Install the necessary libraries and dependencies to run the code and set up the Gradio interface.

**Reasoning**:
Change the directory to the cloned repository and install the dependencies from requirements.txt.
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd a4f-local
!pip install -r requirements.txt

"""**Reasoning**:
The dependencies from requirements.txt have been installed, but there are dependency conflicts reported by pip. Based on the project's goal of creating a Gradio interface for text-to-speech, Gradio and a text-to-speech library (like gTTS or elevenlabs) are likely needed. Given the repository name "a4f-local" and the context of generating voice output, it's reasonable to assume additional libraries related to audio processing might be necessary as well. Install Gradio, gTTS, and pydub to address potential needs.


"""

!pip install gradio gTTS pydub

"""## Set up the gradio interface

### Subtask:
Create a Gradio interface to interact with the model, allowing users to input text.

**Reasoning**:
Import the gradio library and define the function to generate audio from text using the cloned repository's logic. Then, create a Gradio interface using this function.
"""

import gradio as gr
from a4f.a4f import create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
The previous command failed because the module 'a4f' was not found. This is likely because the current working directory is not the root of the cloned repository. I need to adjust the import statement or the working directory to correctly import the `create_audio` function. Since I know the file is located at `./a4f/a4f.py`, I'll directly import from that path.


"""

import gradio as gr
import sys
sys.path.append('./a4f')
from a4f import create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
The previous command still failed to import the 'a4f' module. Although I added './a4f' to the system path, it seems that the module is not being recognized. I will try changing the current working directory back to the root of the cloned repository where the 'a4f' directory is located before attempting the import again.


"""

import gradio as gr
import os
os.chdir('/content/a4f-local')
from a4f import create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
Despite changing the directory, the 'a4f' module is still not found. This indicates an issue with how the module is structured or how Python is searching for it. I will try a different approach by directly importing the `create_audio` function from the specific file path within the cloned repository.


"""

import gradio as gr
import sys
sys.path.append('/content/a4f-local/a4f')
from a4f import create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
The 'a4f' module is still not being found even after trying to add the directory to the system path and changing the current working directory. It seems there is a deeper issue with how the module is being recognized in this environment. Since I cannot directly import the module, I will try to load the function by directly executing the script containing the function and then accessing the function from the executed namespace.


"""

import gradio as gr
import runpy
import sys

# Execute the a4f script to load its functions
script_globals = runpy.run_path("/content/a4f-local/a4f/a4f.py")
create_audio = script_globals["create_audio"]

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
The previous command failed because the file '/content/a4f-local/a4f/a4f.py' was not found. This indicates that the cloning process in the first step might not have placed the files in the expected location or the path is incorrect. I need to verify the file path and try again. I will list the files in the cloned directory to confirm the structure and the presence of the 'a4f' directory and 'a4f.py' file.


"""

import os
print(os.listdir('/content/a4f-local'))
print(os.listdir('/content/a4f-local/a4f'))

"""**Reasoning**:
The previous command revealed that the directory structure within the cloned repository is not as expected. The error message indicates that the directory '/content/a4f-local/a4f' does not exist. Looking at the output of `os.listdir('/content/a4f-local')`, I see a directory named 'a4f_local' instead of 'a4f'. This means the file I need is likely located at '/content/a4f-local/a4f_local/a4f.py'. I will now correct the path and attempt to import the `create_audio` function by adding the correct directory to the system path and then import the module and function.


"""

import gradio as gr
import sys
sys.path.append('/content/a4f-local/a4f_local')
from a4f import create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""**Reasoning**:
I am still encountering a `ModuleNotFoundError` for 'a4f' even after correcting the path and adding it to `sys.path`. This suggests that the issue might be with how the module is packaged or initialized, preventing a direct import in this environment. I will try a different approach to access the `create_audio` function by using `importlib.util` to load the module directly from the file path.


"""

import gradio as gr
import importlib.util
import sys

# Specify the path to the module file
module_path = '/content/a4f-local/a4f_local/a4f.py'

# Load the module from the file path
spec = importlib.util.spec_from_file_location("a4f", module_path)
a4f_module = importlib.util.module_from_spec(spec)
sys.modules["a4f"] = a4f_module
spec.loader.exec_module(a4f_module)

# Access the create_audio function from the loaded module
create_audio = a4f_module.create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

iface = gr.Interface(fn=generate_audio_from_text, inputs="text", outputs="audio")
iface.launch()

"""## Set up the gradio interface

### Subtask:
Retry setting up the Gradio interface by ensuring the correct module path is used when importing the `create_audio` function.

**Reasoning**:
Import necessary libraries, define the correct module path, load the module using importlib.util, add it to sys.modules, execute the module, access the create_audio function, define the Gradio interface function, and launch the Gradio interface.
"""

import gradio as gr
import importlib.util
import sys
import os
import tempfile

# Specify the path to the client.py file
client_module_path = '/content/a4f-local/a4f_local/client.py'

# Load the client module from the file path
spec = importlib.util.spec_from_file_location("a4f_local.client", client_module_path)
client_module = importlib.util.module_from_spec(spec)
sys.modules["a4f_local.client"] = client_module
spec.loader.exec_module(client_module)

# Access the A4F class from the loaded module
A4F = client_module.A4F

# Instantiate the client
client = A4F()

def generate_audio_from_text(text):
    try:
        audio_bytes = client.audio.speech.create(
            model="tts-1",
            input=text,
            voice="alloy"
        )
        with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as tmpfile:
            tmpfile.write(audio_bytes)
            audio_path = tmpfile.name
        return audio_path
    except Exception as e:
        return f"Error generating audio: {e}"

# Create a Gradio interface
iface = gr.Interface(
    fn=generate_audio_from_text,
    inputs=gr.Text(lines=10, max_lines=20, label="Enter text (max 10,000,000,000,000,000 characters)", max_length=10000000000000000),
    outputs="audio"
)
iface.launch()

iface.launch()

with open('/content/a4f-local/a4f_local/a4f.py', 'r') as f:
    print(f.read())

import os
print(os.listdir('/content/a4f-local/a4f_local'))

with open('/content/a4f-local/a4f_local/client.py', 'r') as f:
    print(f.read())

import os
print(os.listdir('/content/a4f-local/a4f_local/providers'))

import os
print(os.listdir('/content/a4f-local/a4f_local/providers/provider_1'))

import os
print(os.listdir('/content/a4f-local/a4f_local/providers/provider_1/tts'))

with open('/content/a4f-local/a4f_local/providers/provider_1/tts/engine.py', 'r') as f:
    print(f.read())

iface.launch()

import gradio as gr
import importlib.util
import sys

# Specify the corrected path to the module file
module_path = '/content/a4f-local/a4f_local/a4f.py'

# Load the module from the file path
spec = importlib.util.spec_from_file_location("a4f", module_path)
a4f_module = importlib.util.module_from_spec(spec)
sys.modules["a4f"] = a4f_module
spec.loader.exec_module(a4f_module)

# Access the create_audio function from the loaded module
create_audio = a4f_module.create_audio

def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

# Create a Gradio interface
iface = gr.Interface(fn=generate_audio_from_text, inputs=gr.Text(lines=10, max_lines=20, label="Enter text (max 100000 characters)", max_length=100000), outputs="audio")
iface.launch()

import gradio as gr
import os
import sys

# Change the current directory to the a4f_local directory
os.chdir('/content/a4f-local/a4f_local')

# Add the current directory to the system path to enable relative imports
sys.path.append('.')

# Attempt to import the create_audio function using a relative import
from a4f_local.a4f import create_audio

# Change back to the original directory if needed (optional, but good practice)
# os.chdir('/content')


def generate_audio_from_text(text):
    audio_path = create_audio(text)
    return audio_path

# Create a Gradio interface
iface = gr.Interface(fn=generate_audio_from_text, inputs=gr.Text(lines=10, max_lines=20, label="Enter text (max 100000 characters)", max_length=100000), outputs="audio")
iface.launch()